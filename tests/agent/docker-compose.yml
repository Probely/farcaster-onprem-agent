services:
  farcaster:
    build:
      dockerfile: Dockerfile
      context: ../../
      args:
        - VERSION=0.0.0
    depends_on:
      proxy:
        condition: service_healthy
      network:
        condition: service_healthy
      #tcpdump:
      #  condition: service_healthy
      #network_mode: service:tcpdump
    network_mode: service:network
    environment:
      - HTTP_PROXY
      - HTTPS_PROXY
      - RUN_MODE
      - FARCASTER_DEBUG_LEVEL
      - FARCASTER_AGENT_TOKEN
      - FARCASTER_API_URL
    cap_add:
    - ${NET_ADMIN}
    volumes:
    - shared-logs:/logs
    restart: "no"
    stop_grace_period: 1s

  network:
    image: ubuntu:noble
    environment:
      - NET_MODE
    command:
      - /bin/bash
      - -c
      - set -eu
        && echo "Setting network parameters..."
        && apt-get update > /dev/null 2>&1
        && apt-get install -y iptables > /dev/null 2>&1
        && { case "${NET_MODE}" in *tcp*)
              iptables -t filter -I OUTPUT -o eth0 -p udp -m multiport --dports 53,443 -j DROP;
              echo "UDP blocked";; esac; }
        && { case "${NET_MODE}" in *proxy*)
              iptables -t filter -I OUTPUT -o eth0 -p tcp --dport 443 -j DROP;
              echo "Direct TCP blocked";;
            esac; }
        && touch /tmp/healthy
        && echo "Network parameters set. Please wait for the agent container to start..."
        && sleep infinity
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/healthy"]
      interval: 1m30s
      timeout: 1s
      retries: 3
      start_period: 10s
    #depends_on:
    #  tcpdump:
    #    condition: service_healthy
    #network_mode: service:tcpdump
    cap_add:
      - NET_ADMIN
    restart: "no"
    stop_grace_period: 1s

  proxy:
    image: vimagick/tinyproxy
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "8888"]
      interval: 30m
      timeout: 30s
      retries: 5
      start_period: 10s
    restart: always
    stop_grace_period: 1s

  tcp_proxy:
    image: ubuntu:noble
    volumes:
      - shared-logs:/logs
    command:
    - /bin/bash
    - -c
    - rm -rf /logs/moproxy
      && mkdir /logs/moproxy
      && chmod 1777 /logs/moproxy
      && while true; do
          test -f /logs/moproxy/moproxy.log && tail -F /logs/moproxy/moproxy.log || sleep 1;
        done
    restart: always
    stop_grace_period: 1s

      #tcpdump:
      #  image: alpine
      #  healthcheck:
      #    test: ["CMD", "pidof", "tcpdump"]
      #    interval: 10s
      #    timeout: 1s
      #    retries: 3
      #  command:
      #  - /bin/ash
      #  - -c
      #  - apk add --no-cache tcpdump > /dev/null 2>&1
      #    && tcpdump -s0 -n -i eth0
      #  restart: always
      #  stop_grace_period: 1s

volumes:
  shared-logs:
